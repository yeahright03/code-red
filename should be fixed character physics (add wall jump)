extends CharacterBody2D

const UP_DIRECTION := Vector2.UP
@export var speed := 200.0
@export var jump_strength := 400.0
@export var maximum_jumps := 2
@export var double_jump_strength := 1200.0
@export var gravity := 2000.0

var _jumps_made := 0
var _velocity := Vector2.ZERO

# Animations
@onready var animated_sprite_2d: AnimatedSprite2D = $AnimatedSprite2D
@onready var _start_scale: Vector2 = animated_sprite_2d.scale



func _physics_process(delta: float) -> void:
	var _horizontal_direction = (
		Input.get_action_strength("move_right")
		- Input.get_action_strength("move_left")
	)

	# horizontal movement
	_velocity.x = _horizontal_direction * speed
	
	# gravity
	_velocity.y += gravity * delta
	
	# Check player states
	var is_falling := _velocity.y > 0.0 and not is_on_floor()
	var is_jumping := Input.is_action_just_pressed("jump") and is_on_floor()
	var is_double_jumping := Input.is_action_just_pressed("jump") and is_falling and _jumps_made < maximum_jumps
	var is_jump_cancelled := Input.is_action_just_released("jump") and _velocity.y < 0.0
	var is_idling := is_on_floor() and is_zero_approx(_velocity.x)
	var is_running := is_on_floor() and not is_zero_approx(_velocity.x)
	
	# Handle jumping
	if is_jumping:
		_jumps_made += 1
		_velocity.y = -jump_strength
	elif is_double_jumping:
		_jumps_made += 1
		_velocity.y = -double_jump_strength
	elif is_jump_cancelled:
		_velocity.y = 0.0
	elif is_idling or is_running:
		_jumps_made = 0
	
	# Assign the calculated velocity to the CharacterBody2D velocity
	velocity = _velocity
	
	# Set the up direction for floor detection
	up_direction = UP_DIRECTION
	
	# Move the character
	move_and_slide()
	
	# Update the internal velocity after movement
	_velocity = velocity
	
	# Flip the Sprite
	if not is_zero_approx(_velocity.x):
		animated_sprite_2d.scale.x = sign(_velocity.x) * _start_scale.x
	
	# Play Animations
	if is_jumping or is_double_jumping:
		animated_sprite_2d.play("jump")
	elif is_falling:
		animated_sprite_2d.play("fall")
	elif is_running:
		animated_sprite_2d.play("run")
	elif is_idling:
		animated_sprite_2d.play("idle")
